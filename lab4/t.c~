#include "type.h"

PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList;
int procSize = sizeof(PROC);
int nproc = 0;

int body();
char *pname[]={"Sun", "Mercury", "Venus", "Earth",  "Mars", "Jupiter", 
               "Saturn", "Uranus", "Neptune" };

/**************************************************
  bio.o, queue.o loader.o are in mtxlib
**************************************************/
/* #include "bio.c" */
/* #include "queue.c" */
/* #include "loader.c" */

#include "wait.c"             // YOUR wait.c   file
#include "kernel.c"           // YOUR kernel.c file
#include "int.c"              // YOUR int.c    file
int color;

int init()
{
    PROC *p; int i;
    color = 0x0C;
    printf("init ....");
    for (i=0; i<NPROC; i++){   // initialize all procs
        p = &proc[i];
        p->pid = i;
        p->status = FREE;
        p->priority = 0;  
        strcpy(proc[i].name, pname[i]);
        p->next = &proc[i+1];
    }

    proc[0].color = 2;
    proc[1].color = 7;

    for( i = 2; i < NPROC; i++)
      {
	p = &proc[i];
        p->color = i+7;
      }

    freeList = &proc[0];      // all procs are in freeList
    proc[NPROC-1].next = 0;
    readyQueue = sleepList = 0;

    /**** create P0 as running ******/
    p = get_proc(&freeList);
    p->status = RUNNING;
    p->ppid   = 0;
    p->parent = p;
    running = p;
    nproc = 1;
    printf("done\n");
} 

int scheduler()
{
    if (running->status == READY)
        enqueue(&readyQueue, running);
     running = dequeue(&readyQueue);
     color = running->pid + 0x0A;
}

int int80h();
int set_vector(u16 segment, u16 handler)
{
     // put_word(word, segment, offset)
     put_word(handler, 0, vector<<2);
     put_word(0x1000,  0,(vector<<2) + 2);
}
            
main()
{
    printf("MTX starts in main()\n");
    init();      // initialize and create P0 as running
    set_vector(80, int80h);

    kfork("/bin/u1");     // P0 kfork() P1

    while(1){
      printf("P0 running\n");
      while(!readyQueue);
      printf("P0 switch process\n");
      tswitch();         // P0 switch to run P1
   }
}

int do_kfork( )
{
    PROC *p = kfork();
    if (p == 0){ printf("kfork failed\n"); return -1; }
    printf("PROC %d kfork a child %d\n", running->pid, p->pid);
    return p->pid;
}
int do_tswitch()
{
  tswitch(); 
}

int do_exit() 
{
  char exit[128];
  int exitnum = 0, i = 0;

  for(i = 0; i < 128;i++)
    exit[i] = '\0';

  printf("enter exit value: ");
  gets(exit);
  exitnum = stoi(exit);
  printf("\n");
  kexit(exitnum);
}
int do_sleep()
{ 
  char event[128];
  int eventnum = 0, i = 0;

  for(i = 0; i < 128;i++)
    event[i] = '\0';

  printf("enter event value: ");
  gets(event);
  eventnum = stoi(event);
  printf("\n");
  ksleep(eventnum);
}
int do_wakeup() 
{
  char event[128];
  int eventnum = 0, i = 0;

  for(i = 0; i < 128;i++)
    event[i] = '\0';

  printf("enter event value: ");
  gets(event);
  eventnum = stoi(event);
  printf("\n");
  kwakeup(eventnum);
}
int do_wait()
{
  int pid, status;
  pid = kwait(&status);
  if( pid == -1)
    {
      printf("\n!!!!!!!!!!!!!!  Error! no children  !!!!!!!!!!!!!\n\n");
      return;
    }
  printf("Found ZOMBIE: pid = %d\texit status = %d\n", pid, status);
}

