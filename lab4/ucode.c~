/*******************************  ucode.c ****************************/


char *cmd[]={"getpid", "ps", "chname", "kmode", "switch", "wait", "exit", "getchar", "fork", "exec", 0};

#define LEN 64

int show_menu()
{
   printf("***************** Menu ***************************************\n");
   printf("* getpid ps  chname  kmode  switch  wait fork exec exit *\n");
   printf("**************************************************************\n");
}

int find_cmd(char *name)
{
    int i = 0;
    for(i = 0 ; i < 10; i++)
    {
        if (strcmp(name,cmd[i]) == 0)
        {
            return i;
        }
    }
    return -1;
}

int getpid()
{
   return syscall(0,0,0);
}

int ps()
{
   return syscall(1, 0, 0);
}

int chname()
{
    char s[32];
    printf("input new name : ");
    gets(s);
    return syscall(2, s, 0);
}

int kfork()
{
  int child, pid;
  pid = getpid();
  printf("proc %d enter kernel to kfork a child\n", pid); 
  child = syscall(3, 0, 0);
  printf("proc %d kforked a child %d\n", pid);
}    

int kswitch()
{
    return syscall(4,2,0); //'2' tells the kernel to change running procs->status to READY, from RUNNING
}

int wait()
{
    int child, exitValue;
    printf("proc %d enter Kernel to wait for a child to die\n", getpid());
    child = syscall(5, &exitValue, 0);
    printf("proc %d back from wait, dead child=%d", getpid(), child);
    if (child>=0)
        printf("exitValue=%d", exitValue);
    printf("\n"); 
} 

int geti()
{
    char *s;
    int i;
    gets(s);
    i = atoi(s);
}

int exit()
{
   int exitValue;
   printf("enter an exitValue: ");
   exitValue = geti();
   printf("exitvalue=%d\n", exitValue);
   printf("enter kernel to die with exitValue=%d\n", exitValue);
   _exit(exitValue);
}

int _exit(int exitValue)
{
  return syscall(6,exitValue,0);
}

int invalid(char *name)
{
    printf("Invalid command : %s\n", name);
}

int getchar()
{
    char c;
    printf("enter char: ");
    c = syscall(7,0,0);
    syscall(8,c,0);
    printf("\n");
}

int fork()
{
    int pid;
    printf("Enter kernel to fork...\n");
    pid = syscall(9,0,0,0);
    if(pid == -1)
        return -1;

    if(pid == 0)
    {
        printf("I am child returned pid = %d\n", pid);
    }
    else
    {
        printf("I am parent returned pid = %d\n", pid);
    }
    return 0;
}

int exec()
{
    char s[64];
    printf("Enter filename: ");
    gets(s);
    printf("\n");
    return syscall(10,s,0,0);
}

int kmode()
{
    syscall(11,0,0,0);
}